import { Stack } from 'expo-router';
import { useEffect, useState } from 'react';
import { Alert, Button, Pressable, TextInput, View, Text } from 'react-native';
import { useAuth } from '~/contexts/AuthProvider'; // Contexto de autenticação
import { auth, db } from '~/utils/firebase'; // Importando o Firebase config (auth e db)
import { getDoc, setDoc, doc } from 'firebase/firestore'; // Firestore
import { signOut } from 'firebase/auth'; // Função de logout

export default function Profile() {
  const [loading, setLoading] = useState(false);
  const [username, setUsername] = useState('');
  const [website, setWebsite] = useState('');
  const [fullName, setFullName] = useState('');
  const [avatarUrl, setAvatarUrl] = useState('');

  // A sessão vem do contexto de autenticação
  const {user, session } = useAuth(); 

  // Carregar o perfil do Firestore quando a sessão estiver disponível
  useEffect(() => {
    if (session?.user) {
      getProfile();
    }
  }, [session]);

  // Função para buscar os dados do perfil no Firestore
  async function getProfile() {
    try {
      setLoading(true);
      if (!session?.user?.uid) throw new Error('User not authenticated!');

      const userDocRef = doc(db, 'profiles', session.user.uid); // Referência ao documento do perfil
      const userDocSnap = await getDoc(userDocRef);

      if (userDocSnap.exists()) {
        const data = userDocSnap.data();
        setUsername(data.username || '');
        setWebsite(data.website || '');
        setAvatarUrl(data.avatar_url || '');
        setFullName(data.full_name || '');
      } else {
        throw new Error('Profile not found!');
      }
    } catch (error) {
      if (error instanceof Error) {
        Alert.alert(error.message);
      }
    } finally {
      setLoading(false);
    }
  }

  // Função para atualizar os dados do perfil no Firestore
  async function updateProfile({
    username,
    website,
    avatar_url,
    full_name,
  }: {
    username: string;
    website: string;
    avatar_url: string;
    full_name: string;
  }) {
    try {
      setLoading(true);
      if (!session?.user?.uid) throw new Error('User not authenticated!');

      const userDocRef = doc(db, 'profiles', session.user.uid); // Referência ao documento do perfil
      await setDoc(userDocRef, {
        username,
        website,
        avatar_url,
        full_name,
        updated_at: new Date(),
      }, { merge: true }); // merge: true evita sobrescrever outros dados não passados

    } catch (error) {
      if (error instanceof Error) {
        Alert.alert(error.message);
      }
    } finally {
      setLoading(false);
    }
  }

  return (
    <View className="flex-1 gap-3 bg-white p-5">
      <Stack.Screen options={{ title: 'Profile' }} />

      {/* Campo de email, não editável */}
      <TextInput
        editable={false}
        value={user?.email || 'Carregando...'}  // Exibe 'Carregando...' enquanto não tiver email
        placeholder="Email"
        autoCapitalize="none"
        className="rounded-md border border-gray-200 p-3 text-gray-600"
      />

      {/* Campo de nome completo */}
      <TextInput
        value={fullName}
        onChangeText={setFullName}
        placeholder="Full Name"
        autoCapitalize="none"
        className="rounded-md border border-gray-200 p-3"
      />

      {/* Campo de nome de usuário */}
      <TextInput
        value={username}
        onChangeText={setUsername}
        placeholder="Username"
        autoCapitalize="none"
        className="rounded-md border border-gray-200 p-3"
      />

      {/* Campo de site */}
      <TextInput
        value={website}
        onChangeText={setWebsite}
        placeholder="Website"
        autoCapitalize="none"
        className="rounded-md border border-gray-200 p-3"
      />

      {/* Botão para salvar as alterações */}
      <Pressable
        onPress={() =>
          updateProfile({ username, website, avatar_url: avatarUrl, full_name: fullName })
        }
        disabled={loading}
        className="items-center rounded-md border-2 border-red-500 p-3 px-8"
      >
        <Text className="text-lg font-bold text-red-500">Save</Text>
      </Pressable>

      {/* Botão para deslogar */}
      <Button title="Sign out" onPress={() => signOut(auth)} />
    </View>
  );
}
